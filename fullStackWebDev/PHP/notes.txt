 - PHP
 - Server-side scripting language. Others include: PHP, JSP, ASP, Python etc
 - Client-side languages: HTML, CSS & JS
 - Requirements:
    1. Editor
    2. Tools that allow us to create a server like XAMPP

 - PHP stands for PHP Hypertext Pre-processor
 - Originally created by Danish-Canadian programming Rasmus Lerdorf in 1993 and released in 1995
 - Server-side scripting language
 - PHP is used to create dynamic and interactive websites
 - Open-source: PHP is free to download and use
 - Platform independent: PHP code can run on any OS
 - Faster: Runs faster than other scripting languages
 - PHP is compatible with almost all servers used today (Apache, IIS etc.)
 - PHP supports a wide range of databases (MySQL, Oracle, MongoDB etc.)

 - PHP can:
      1. can generate dynamic page content
      2. can create open, read, write, delete, and close files on the server
      3. can collect form data
      4. 

 - PHP Datatypes:
      1. string
      2. integer
      3. float
      4. boolean
      5. Array
      6. Object
      7. NULL
      8. Resource

   Note - Functions in PHP can be used with or without declaration

 - Super Global Variables
      1. _GET
      2. _POST
      3. _REQUEST
      4. _COOKIE
      5. _SESSION and more
 
 - Cookies:
   - Cookie is a small text file(4Kb) that stores user preferences(like browser version, shopping history etc) on the client-side(browser)
   - Cache memory stores cookies, that is why size of cookies is restricted to 4Kb

   - setcookie(name, value, expire, path, domain, secure, httponly); // Except for name and value, everything else is not mandatory
         $name = "user";
         $value = "John";
         $expire = time() + (60 * 60 * 24 * 30);   // 30 days from now, if not specified then the cookie is persistent i.e., cookie is retained in the browser infinitely
         $path = "/account";   // Where the cookie is stored and only directory specified and its subdirectories can access this cookie. This will set the cookie to be used by example.com/account and its subdirectories but not example.com (not in root directory)
         $domain = ".example.com";  // Available for the domains and all subdomains
         $secure = true;   // Available only over HTTPS
         $httponly = true; // Accessible only through HTTP(not JS)

   - getcookie();

 - Sessions
     Client                                                            Server
               1. Login ==>
               2. Create Session ==>
               3. Set Cookie with session id <==
               4. Http request containing Cookie with session id ==>
               5. Verify the cookie ==>
               6. Resource <==

     Q.   Why session id is hard to crack?
     Ans. 1. Sessions are stored at server side
          2. Session id is generated by server and if even 1 bit is changed during data transmission, then whole session is terminated

     - Sessions can store all the tuples that cookies can store
     - Sensitive data is stored in sessions, unsensitive data can be stored in cookies for faster access
     - Cookies are accessible by client-side scripting languages like JS, PHP but sessions are not accessible by client-side scripting languages

     - Sessions are also created in the same way as cookies:
          Whenever sessions are created, session_start() should be the first line of the code
          1. Start a session
          2. Set session Variables
          3. Get session Variables
          4. Modify session Variables
          5. Delete session Variables

 - Connect PHP with MySQL
     1. Two classes (MySQLi and PDO(PHP Data Objects)) can be used to connect PHP with MySQL server

 - Database connectivity using MySQLi
     $servername = "localhost";
     $username = "username";
     $password = "password";
     $conn = new mysqli($servername, $username, $password, $dbname(optional));      // This line creates a new instance of the MySQLi class, which establishes a connection to the MySQL database server name, username, and password specified earlier

     // Checking the connection
          if($conn -> connect_error)
          {
               die("Connection failed: ".$conn->connect_error);
          }
          echo "Connected successfully";

     // Executing Queries
          $conn -> query("Sql query");